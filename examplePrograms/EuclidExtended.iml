program EuclidExtended
global
  var   a :int32 ; var   b :int32 ;
  const u :int32 ; const v :int32 ;
  const u':int32 ; const v':int32 ;

  input(a, b) ;

  output(a, b, u, v, u', v') ;

  proc euclidExtended
    (inout copy var g :int32, inout copy var g':int32,
     out   copy var u :int32, out   copy var v :int32,
     out   copy var u':int32, out   copy var v':int32)
    //pre: g >= 0 &? g' >= 0
    //post: g = gcd(old(g), old(g')) = u * old(g) + v * old(g')
  local
    var q:int32
  do
    q init := 0 ; // only locally used in loop
    u init := 1 ; v init := 0 ; u' init := 0 ; v' init := 1 ;
    //u init := 1+g' ; v init := 0-g ; u' init := 0 ; v' init := 1 ;
    while g' /= 0 do
      q := g divE g' ;
      g := g - q * g' ; u := u - q * u' ; v := v - q * v' ;
      call swap(g, g') ; call swap(u, u') ; call swap(v, v')
    endwhile
  endproc ;

  proc swap(inout ref var x:int32, inout ref var y:int32)
  local const h:int32
  do h init := x ; x := y ; y := h endproc
do
  call euclidExtended(a, b, u init, v init, u' init, v' init)
endprogram
